package main

import (
	"encoding/csv"
	"fmt"
	"log"
	"os"
	"time"

	"github.com/go-co-op/gocron"
	"github.com/gocolly/colly"
)

type Book struct {
	Title string
	Price string
}

func BooksScraper() {

	fmt.Println("Start scraping")
	file, err := os.Create("export.csv")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	writer := csv.NewWriter(file)
	defer writer.Flush()
	headers := []string{"Title", "Price"}
	writer.Write(headers)
	c := colly.NewCollector(
		colly.AllowedDomains("books.toscrape.com"),
	)
	proxyUsername := "Username"
	proxyPassword := "Password"
	proxyUrl := fmt.Sprintf("http://customer-%s:%s@pr.oxylabs.io:7777", proxyUsername, proxyPassword)

	c.SetProxy(proxyUrl)

	c.OnHTML(".product_pod", func(e *colly.HTMLElement) {
		book := Book{}
		book.Title = e.ChildAttr(".image_container img", "alt")
		book.Price = e.ChildText(".price_color")
		row := []string{book.Title, book.Price}
		writer.Write(row)
	})
	c.OnResponse(func(r *colly.Response) {
		fmt.Println(r.StatusCode)
	})
	c.OnRequest(func(r *colly.Request) {
		fmt.Println("Visiting", r.URL)
	})
	c.Visit("https://books.toscrape.com/")
}
func main() {

	my_scheduler := gocron.NewScheduler(time.UTC)
	my_scheduler.Every(2).Minute().Do(BooksScraper)
	my_scheduler.StartBlocking()
}
